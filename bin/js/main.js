"use strict";var é=function(t){return document.querySelector(t)},ç=function(t){return document.createElement(t)},Parser=function(){function t(t){var e={ajax:function(t,e,n){var r=new Promise(function(n,r){var a=new XMLHttpRequest,i=e;a.open(t,i),a.send(),a.onload=function(){this.status>=200&&this.status<300?n(this.response):r(this.statusText)},a.onerror=function(){r(this.statusText)}});return r}};return{get:function(n){return e.ajax("GET",t,n)}}}return{fetchContent:function(){function e(e,n){var r=n?e:"bin/js/json/"+e+".json",a={success:function(t){var t=n?t:JSON.parse(t);n?Render.getPart(t,n):Render.build(t)},error:function(t){throw new Error(t)}};t(r).get().then(a.success).catch(a.error)}var n=new Map([["header","bin/partials/header.html"],[".contact","bin/partials/contact.html"]]),r=["experience"],a=!0,i=!1,o=void 0;try{for(var c,s=n[Symbol.iterator]();!(a=(c=s.next()).done);a=!0){var l=c.value;e(l[1],l[0])}}catch(t){i=!0,o=t}finally{try{!a&&s.return&&s.return()}finally{if(i)throw o}}var u=!0,d=!1,f=void 0;try{for(var v,h=r[Symbol.iterator]();!(u=(v=h.next()).done);u=!0){var m=v.value;e(m)}}catch(t){d=!0,f=t}finally{try{!u&&h.return&&h.return()}finally{if(d)throw f}}}}}(),Render={settings:{createEl:"div",parentEl:"main"},build:function(t){var t=t.items,e=(é(this.settings.parentEl),!0),n=!1,r=void 0;try{for(var a,i=t[Symbol.iterator]();!(e=(a=i.next()).done);e=!0){a.value}}catch(t){n=!0,r=t}finally{try{!e&&i.return&&i.return()}finally{if(n)throw r}}},getPart:function(t,e){if(~e.indexOf(".")){var e=e.substr(1),n=ç(this.settings.createEl);n.classList.add(e),n.innerHTML=t,n.onclick=Interact.toggleClicked;var r=é(this.settings.parentEl);r.appendChild(n)}else{var a=é(e),n=ç(e);n.innerHTML=t,n.onclick=Interact.toggleClicked,document.body.replaceChild(n,a)}},init:function(){Parser.fetchContent()}},Interact={toggleClicked:function(){var t=é("header");"clicked"==t.className?t.className="reverse":t.className="clicked"},resetClicked:function(){var t=é(".clicked");if(void 0===t.length)t.removeAttribute("class");else for(var e=0;e<t.length;e++){var n=t[e];n.removeAttribute("class")}}};window.addEventListener("DOMContentLoaded",function(){Render.init()});
//# sourceMappingURL=data:application/json;base64,
