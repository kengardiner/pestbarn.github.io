"use strict";var é=function(e){return document.querySelector(e)},ç=function(e){return document.createElement(e)},Parser=function(){function e(e){var t={ajax:function(e,t){var n=new Promise(function(n,r){var a=new XMLHttpRequest,i=t;a.open(e,i),a.send(),a.onload=function(){this.status>=200&&this.status<300?n(this.response):r(this.statusText)},a.onerror=function(){r(this.statusText)}});return n}};return{get:function(){return t.ajax("GET",e)}}}return{fetchContent:function(){function t(t,n){var r=n?t:"bin/js/json/"+t+".json",a={success:function(e){e=n?e:JSON.parse(e),n?Render.getPart(e,n):Render.buildList(e,t)},error:function(e){throw new Error(e)}};e(r).get().then(a.success).catch(a.error)}var n=new Map([["header","bin/partials/header.html"],[".contact","bin/partials/contact.html"],["aside","bin/partials/aside.html"]]),r=["experience"],a=!0,i=!1,s=void 0;try{for(var o,c=n[Symbol.iterator]();!(a=(o=c.next()).done);a=!0){var d=o.value;t(d[1],d[0])}}catch(e){i=!0,s=e}finally{try{!a&&c.return&&c.return()}finally{if(i)throw s}}var l=!0,u=!1,g=void 0;try{for(var f,m=r[Symbol.iterator]();!(l=(f=m.next()).done);l=!0){var h=f.value;t(h)}}catch(e){u=!0,g=e}finally{try{!l&&m.return&&m.return()}finally{if(u)throw g}}},fetchGigs:function(){var t="//spreadsheets.google.com/feeds/list/1Tf2vRy6me9F3knQSA5FpfvrTLuNetlkd0Mmb2P20Jqo/1/public/values?alt=json",n={success:function(e){var t=JSON.parse(e),n=t.feed.entry,r=t.feed.updated.$t;r="Last updated: "+r.substr(0,10),é("#attended-gigs .mdl-spinner").remove(),é("#gigs .mdl-tooltip").innerHTML=r;var a=document.getElementById("giglist");for(var i in n)if(i>0&&Tables.gigList(n[i].gsx$headline.$t,n[i].gsx$text.$t,n[i].gsx$startdate.$t),i==n.length-1){sorttable.makeSortable(a);var s={valueNames:["gig-name","gig-location","gig-date"]};new List("attended-gigs",s)}},error:function(e){throw new Error(e)}};e(t).get().then(n.success).catch(n.error)},fetchBeer:function(){var t="//spreadsheets.google.com/feeds/list/1a056ruITWMr8oeJECb8QM6ePe00IqTTEIkrkhY-QeMI/1/public/values?alt=json",n={success:function(e){var t=JSON.parse(e),n=t.feed.entry,r=t.feed.updated.$t;r="Last updated: "+r.substr(0,10),é("#untappd-stats .mdl-spinner").remove(),é("#beers .mdl-tooltip").innerHTML=r;var a=document.getElementById("beerlist");for(var i in n){var s=n[i].gsx$createdat.$t;if(s=s.substr(0,10),i>0&&Tables.beerList(n[i].gsx$breweryname.$t,n[i].gsx$beername.$t,n[i].gsx$beertype.$t,n[i].gsx$beerabv.$t,n[i].gsx$ratingscore.$t,s),i==n.length-1){sorttable.makeSortable(a);var o={valueNames:["brewery","beer-name","beer-type","beer-abv","beer-rating","beer-date"]};new List("untappd-stats",o)}}},error:function(e){throw new Error(e)}};e(t).get().then(n.success).catch(n.error)}}}(),Render={settings:{createEl:"div",parentEl:"main"},buildList:function(e,t){function n(e,t,n){return e=ç(e),e.appendChild(document.createTextNode(t)),n&&e.setAttribute("href","//"+t),e}e=e.items;var r=é("."+t),a=ç("ul"),i=!0,s=!1,o=void 0;try{for(var c,d=e[Symbol.iterator]();!(i=(c=d.next()).done);i=!0){for(var l=c.value,u=ç("li"),g=[n("h2",l.title),n("h3",l.position),n("time",l.dateFrom),n("span","—"),n("time",l.dateTo),l.url&&n("a",l.url,1)],f=document.createDocumentFragment(),m=0;m<g.length;m++)g[m]&&f.appendChild(g[m]);u.appendChild(f),a.appendChild(u)}}catch(e){s=!0,o=e}finally{try{!i&&d.return&&d.return()}finally{if(s)throw o}}r.appendChild(a)},getPart:function(e,t){if(~t.indexOf(".")){t=t.substr(1);var n=ç(Render.settings.createEl);n.classList.add(t),n.innerHTML=e,n.onclick=Interact.toggleClicked;var r=é(Render.settings.parentEl);r.appendChild(n)}else{var a=é(t),i=ç(t);i.innerHTML=e,i.onclick=Interact.toggleClicked,document.body.replaceChild(i,a),~t.indexOf("header")&&Pizazz.check(),~t.indexOf("aside")&&Age.calc()}},init:function(){if(Request.isIndex()&&Parser.fetchContent(),Request.isPage("/stats/")){Parser.fetchGigs(),Parser.fetchBeer();var e=document.location.hash;e&&!function(){var t=é('a[href="'+e+'"]');window.addEventListener("load",function(){t.click()})}()}}},Interact={toggleClicked:function(e){var t=e.target.parentElement.nodeName,n=e.target.classList;if("HEADER"==t||"MAIN"==t||"locate"==n){var r=é("header");"clicked"==r.className?r.className="reverse":r.className="clicked"}}},Age={calc:function(){var e=é("time"),t=e.getAttribute("datetime"),n=new Date,r=n.getMonth()+1<=9?""+n.getMonth()+1:n.getMonth()+1,a=[n.getFullYear(),r,parseInt(("0"+n.getDate()).slice(-2))],i=[t.slice(0,4),t.slice(5,7),t.slice(8,10)];a=a.join(""),i=i.join("");var s=(a-i).toString().slice(0,2);e.innerHTML=s+","}},Request={isIndex:function(){if("/"==document.location.pathname)return!0},isPage:function(e){if(document.location.pathname==e)return!0}},Tables={gigList:function(e,t,n){var r=document.createDocumentFragment(),a=é("#giglist tbody"),i='<td class="mdl-data-table__cell--non-numeric gig-name">\n                '+e+'\n            </td>\n            <td class="mdl-data-table__cell--non-numeric gig-location">\n                '+t+'\n            </td>\n            <td class="gig-date">'+n+"</td>",s=ç("tr");s.innerHTML=i,r.appendChild(s),a.appendChild(r)},beerList:function(e,t,n,r,a,i){var s=document.createDocumentFragment(),o=é("#beerlist tbody"),c='<td class="mdl-data-table__cell--non-numeric brewery">\n                '+e+'\n            </td>\n            <td class="mdl-data-table__cell--non-numeric beer-name">\n                '+t+'\n            </td>\n            <td class="mdl-data-table__cell--non-numeric beer-type">\n                '+n+'\n            </td>\n            <td class="beer-abv">'+r+'</td>\n            <td class="beer-rating">'+a+'</td>\n            <td class="beer-date">'+i+"</td>",d=ç("tr");d.innerHTML=c,s.appendChild(d),o.appendChild(s)}},Pizazz={check:function(){var e=navigator.userAgent;if(e.indexOf("Firefox")!=-1||e.indexOf("Safari")){var t=ç("img"),n="src/img/logotype.svg";t.setAttribute("src",n);var r=document.getElementById("logotype"),a=é("header");a.replaceChild(t,r)}}};window.addEventListener("DOMContentLoaded",function(){Render.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
