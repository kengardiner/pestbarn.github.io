"use strict";var Parser=function(){function t(t){var e={ajax:function(t,e,r){var n=new Promise(function(r,n){var a=new XMLHttpRequest,i=e;a.open(t,i),a.send(),a.onload=function(){this.status>=200&&this.status<300?r(this.response):n(this.statusText)},a.onerror=function(){n(this.statusText)}});return n}};return{get:function(r){return e.ajax("GET",t,r)}}}return{fetchContent:function(){function e(e,r){var n=r?e:"bin/js/json/"+e+".json",a={success:function(t){var t=r?t:JSON.parse(t);r?Render.getPart(t,r):Render.build(t)},error:function(t){throw new Error(t)}};t(n).get().then(a.success).catch(a.error)}var r=new Map([["header","bin/partials/header.html"],[".contact","bin/partials/contact.html"]]),n=["experience"],a=!0,i=!1,o=void 0;try{for(var u,c=r[Symbol.iterator]();!(a=(u=c.next()).done);a=!0){var s=u.value;e(s[1],s[0])}}catch(t){i=!0,o=t}finally{try{!a&&c.return&&c.return()}finally{if(i)throw o}}var l=!0,d=!1,f=void 0;try{for(var v,h=n[Symbol.iterator]();!(l=(v=h.next()).done);l=!0){var y=v.value;e(y)}}catch(t){d=!0,f=t}finally{try{!l&&h.return&&h.return()}finally{if(d)throw f}}}}}(),Render={build:function(t){var t=t.items,e=(document.querySelector(".grid"),!0),r=!1,n=void 0;try{for(var a,i=t[Symbol.iterator]();!(e=(a=i.next()).done);e=!0){var o=a.value;o.title,o.url,!!o.hasOwnProperty("size")&&o.size}}catch(t){r=!0,n=t}finally{try{!e&&i.return&&i.return()}finally{if(r)throw n}}},getPart:function(t,e){if(e.indexOf(".")!==-1){var e=e.substr(1),r=document.createElement("div");r.classList.add(e),r.innerHTML=t;var n=document.querySelector("main");n.appendChild(r)}else{var a=document.querySelector(e),r=document.createElement(e);r.innerHTML=t,document.body.replaceChild(r,a)}},init:function(){Parser.fetchContent()}};document.addEventListener("DOMContentLoaded",function(){Render.init()});
//# sourceMappingURL=data:application/json;base64,
