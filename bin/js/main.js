"use strict";var é=function(e){return document.querySelector(e)},ç=function(e){return document.createElement(e)},Parser=function(){function e(e){var t={ajax:function(e,t){var n=new Promise(function(n,r){var i=new XMLHttpRequest,a=t;i.open(e,a),i.send(),i.onload=function(){this.status>=200&&this.status<300?n(this.response):r(this.statusText)},i.onerror=function(){r(this.statusText)}});return n}};return{get:function(){return t.ajax("GET",e)}}}return{fetchContent:function(){function t(t,n){var r=n?t:"bin/js/json/"+t+".json",i={success:function(e){e=n?e:JSON.parse(e),n?Render.getPart(e,n):Render.buildList(e,t)},error:function(e){throw new Error(e)}};e(r).get().then(i.success).catch(i.error)}var n=new Map([["header","bin/partials/header.html"],[".contact","bin/partials/contact.html"],["aside","bin/partials/aside.html"]]),r=["experience"],i=!0,a=!1,o=void 0;try{for(var s,c=n[Symbol.iterator]();!(i=(s=c.next()).done);i=!0){var l=s.value;t(l[1],l[0])}}catch(e){a=!0,o=e}finally{try{!i&&c.return&&c.return()}finally{if(a)throw o}}var u=!0,d=!1,f=void 0;try{for(var h,v=r[Symbol.iterator]();!(u=(h=v.next()).done);u=!0){var g=h.value;t(g)}}catch(e){d=!0,f=e}finally{try{!u&&v.return&&v.return()}finally{if(d)throw f}}},fetchGigs:function(){var t="//spreadsheets.google.com/feeds/list/1Tf2vRy6me9F3knQSA5FpfvrTLuNetlkd0Mmb2P20Jqo/1/public/values?alt=json",n={success:function(e){var t=JSON.parse(e),n=t.feed.entry;for(var r in n)r>0&&console.log(n[r].gsx$headline.$t,n[r].gsx$text.$t,n[r].gsx$startdate.$t)},error:function(e){throw new Error(e)}};e(t).get().then(n.success).catch(n.error)}}}(),Render={settings:{createEl:"div",parentEl:"main"},buildList:function(e,t){function n(e,t,n){return e=ç(e),e.appendChild(document.createTextNode(t)),n&&e.setAttribute("href","//"+t),e}e=e.items;var r=é("."+t),i=ç("ul"),a=!0,o=!1,s=void 0;try{for(var c,l=e[Symbol.iterator]();!(a=(c=l.next()).done);a=!0){for(var u=c.value,d=ç("li"),f=[n("h2",u.title),n("h3",u.position),n("time",u.dateFrom),n("span","—"),n("time",u.dateTo),u.url&&n("a",u.url,1)],h=document.createDocumentFragment(),v=0;v<f.length;v++)f[v]&&h.appendChild(f[v]);d.appendChild(h),i.appendChild(d)}}catch(e){o=!0,s=e}finally{try{!a&&l.return&&l.return()}finally{if(o)throw s}}r.appendChild(i)},getPart:function(e,t){if(~t.indexOf(".")){t=t.substr(1);var n=ç(this.settings.createEl);n.classList.add(t),n.innerHTML=e,n.onclick=Interact.toggleClicked;var r=é(this.settings.parentEl);r.appendChild(n)}else{var i=é(t);n=ç(t),n.innerHTML=e,n.onclick=Interact.toggleClicked,document.body.replaceChild(n,i),~t.indexOf("aside")&&Age.calc()}},init:function(){Request.isIndex()&&Parser.fetchContent(),Request.isPage("/gigs/")&&Parser.fetchGigs()}},Interact={toggleClicked:function(){var e=this.nodeName;if("HEADER"==e||"contact"==this.classList){var t=é("header");"clicked"==t.className?t.className="reverse":t.className="clicked"}}},Age={calc:function(){var e=é("time"),t=e.getAttribute("datetime"),n=new Date,r=[n.getFullYear(),n.getMonth()+1,("0"+n.getDate()).slice(-2)],i=[t.slice(0,4),t.slice(5,7),t.slice(8,10)];r=r.join(""),i=i.join("");var a=(r-i).toString().slice(0,2);e.innerHTML=a+","}},Request={isIndex:function(){if("/"==document.location.pathname)return!0},isPage:function(e){if(document.location.pathname==e)return!0}};window.addEventListener("DOMContentLoaded",function(){Render.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
