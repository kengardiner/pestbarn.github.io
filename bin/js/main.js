"use strict";var _typeof="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e},parser=function(){function e(e,t,n){var r=e,o=t,i=document.createDocumentFragment();o.forEach(function(e){var t=document.createElement("span");"string"==typeof e&&e.replace(/[^\,\w\s]/gi,""),t.textContent=e,i.appendChild(t)}),r.appendChild(i);var a=n;a.appendChild(r,n)}function t(e){var n=[];for(var r in e){var o=e[r];"object"===("undefined"==typeof o?"undefined":_typeof(o))?n.push(t(o)):n.push(o)}return n}var n=!0,r=function(e,t,r){try{var i=JSON.parse(e);i&&"object"===("undefined"==typeof i?"undefined":_typeof(i))&&o(i,a,t)}catch(e){if(n)throw new Error(e);throw new Error("WTF is this? Hit me up with these details: \n"+e)}},o=function(e,t,n){void 0!=e&&e.hasOwnProperty&&t(e,n)},i=function(e,t){var n=document.getElementsByTagName(t),r=e,o=!0,i=!1,a=void 0;try{for(var u,l=n[Symbol.iterator]();!(o=(u=l.next()).done);o=!0){var s=u.value;s.innerHTML=r}}catch(e){i=!0,a=e}finally{try{!o&&l.return&&l.return()}finally{if(i)throw a}}},a=function(n,r){for(var o=document.getElementById(r[0]),i=n.items,a=i.length,u=t(i),l=0,s=a;l<s;l++){var c=document.createElement(r[1]),f=u[l][0].toLowerCase().replace(/[^\w\s]/gi,"");c.classList.add(f),e(c,u[l],o)}},u=function(e,t,a){var u=new XMLHttpRequest,a=a,l="file"==t;l&&u.overrideMimeType("application/json"),u.open("GET",e,!0),u.onreadystatechange=function(){if(4===u.readyState&&200===u.status){var e=this.response;l?r(e,a,o):o(e,i,a)}},n&&(u.ontimeout=function(){console.log("The request timed out.")},u.timeout=1e3),u.send()};return{xhrObjs:function(e){var t=e.items,n=!0,r=!1,o=void 0;try{for(var i,a=t[Symbol.iterator]();!(n=(i=a.next()).done);n=!0){var l=i.value;u(l.url,"object",l.tag)}}catch(e){r=!0,o=e}finally{try{!n&&a.return&&a.return()}finally{if(r)throw o}}},xhrFile:function(e,t){u(e,"file",t)}}}(),HeaderModule={init:function(){var e={items:[{url:"bin/partials/header.html",tag:"header"},{url:"bin/partials/navigation.html",tag:"nav"}]};parser.xhrObjs(e)}},ExperienceModule={init:function(){var e="src/js/json/experience.json",t=["experience","div"];parser.xhrFile(e,t)}},SkillsModule={init:function(){var e="bin/js/json/skills.json",t=["skills","li"];parser.xhrFile(e,t)}};document.addEventListener("DOMContentLoaded",function(){HeaderModule.init(),ExperienceModule.init(),SkillsModule.init()});
//# sourceMappingURL=data:application/json;charset=utf8;base64,
